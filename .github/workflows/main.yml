name: Python Architecture Linter

on: [push]

jobs:
  lint-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.9]
        poetry-version: [1.1.6]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install Project Dependencies
        run: |
          poetry install

      - name: Lint with black
        run: |
          poetry run black . --check

      - name: Lint with mypy
        run: |
          poetry run mypy .

      - name: Lint with flake8 --ignore=E501
        run: |
          poetry run flake8 . --count --show-source --statistics --ignore=E501

      - name: Lint with isort
        run: |
          poetry run isort . --check

      - name: Test with pytest
        run: |
          poetry run coverage run -m pytest -x --tb=short -q --cov-report term-missing  --cov=. --cov-report xml
          poetry run coverage report

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Check poetry lock file
        run: |
          pip install poetry-lock-check==0.1.0
          python -m poetry_lock_check check-lock

  package-and-release:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Build packages
        run: |
          PANTS_SHA=0182de9814c7694eed2b9407e3577684db26ea2e ./pants package ::
      - name: Deploy packages
        run: |
          pip install twine
          TWINE_USERNAME="__token__" \
          TWINE_PASSWORD="${{ secrets.PYPI_API_TOKEN }}" \
          twine upload dist/* --verbose
